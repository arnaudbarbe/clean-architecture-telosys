package ${target.javaPackageFromFolder(${SRC})};
#set( $lowerEntityName = $entity.name.toLowerCase() )
#set( $upperEntityName = $entity.name.toUpperCase() )
#if($entity.keyAttribute.hasTag("uuid"))
#set( $idType = "UUID")
import java.util.${idType};
#else	
#set( $idType = $entity.keyAttribute.simpleType)
import ${entity.keyAttribute.simpleType}
#end
import java.util.List;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import fr.arnaud.cleanarchitecture.core.model.${entity.name};
import fr.arnaud.cleanarchitecture.core.service.${entity.name}Service;
import fr.arnaud.cleanarchitecture.infrastructure.delivery.controller.v1.ToolsController;
import fr.arnaud.cleanarchitecture.infrastructure.delivery.controller.v1.model.${entity.name}Model;
import fr.arnaud.cleanarchitecture.infrastructure.delivery.dto.v1.${entity.name}Dto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.tags.Tags;

@RestController
@RequestMapping("/v1/${lowerEntityName}s")
@Tag(name = "${entity.name}", description = "The ${entity.name} API")
public class ${entity.name}Controller extends ToolsController {

    private final ${entity.name}Service ${lowerEntityName}Service;
    @Autowired
    public ${entity.name}Controller(final ${entity.name}Service ${lowerEntityName}Service) {
        this.${lowerEntityName}Service = ${lowerEntityName}Service;   
	}

    
    
    
    
    
    
    
	@PostMapping( 
			consumes = MediaType.APPLICATION_JSON_VALUE,
			produces = MediaType.APPLICATION_JSON_VALUE)

	@ResponseStatus(code = HttpStatus.CREATED)

	@Operation(
			summary = "Create a ${lowerEntityName}",
			description = "Create a ${lowerEntityName}")

    @ApiResponses(
    		value = {@ApiResponse(
    				responseCode = "201", 
    				description = "created",
    						content = @Content(
    						        schema = @Schema(implementation = ${idType}.class, example = "f67546f1-5a47-4e86-b7a9-dbae57fbbb57")
    						)
    				)}
    		)

	@Tags({ 
		@Tag(name="${entity.name}")})
    public ResponseEntity<${idType}> create${entity.name}( @RequestBody final ${entity.name}Dto ${lowerEntityName}) {

		${idType} id = this.${lowerEntityName}Service.create${entity.name}(${lowerEntityName}.toEntity());
		
		return ResponseEntity
	    	      .status(HttpStatus.CREATED)
	    	      .headers(getLocationHeader("/v1/${lowerEntityName}s" + id))
	    	      .body(id);
    }

	
	
	
	
	
	
	
	
	@PutMapping(
			value = "/{${lowerEntityName}Id}",
			consumes = MediaType.APPLICATION_JSON_VALUE)

	@ResponseStatus(code = HttpStatus.NO_CONTENT)

	@Operation(
			summary = "update a ${entity.name}", 
			description = "update a ${entity.name}")

	@ApiResponses(
			value = { @ApiResponse(
					responseCode = "204", 
					description = "no content") })

	@Tags({ 
		@Tag(name="${entity.name}")})
    public ResponseEntity<Void> update${entity.name}(@PathVariable final ${idType} ${lowerEntityName}Id, @RequestBody final ${entity.name}Dto ${lowerEntityName}) {
   		this.${lowerEntityName}Service.update${entity.name}(${lowerEntityName}Id, ${lowerEntityName}.toEntity());
		return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
    }

	
	
	
	
	
	
	
	@DeleteMapping(
			value = "/{${lowerEntityName}Id}")

	@ResponseStatus(code = HttpStatus.NO_CONTENT)

	@Operation(
			summary = "Delete a ${lowerEntityName}",
			description = "Delete a ${lowerEntityName} by its identifier")

	@ApiResponses(
			value = { @ApiResponse(
					responseCode = "204", 
					description = "no content") })

	@Tags({ 
		@Tag(name="${entity.name}")})
    public ResponseEntity<Void> delete${entity.name}(@PathVariable final ${idType} ${lowerEntityName}Id) {
		this.${lowerEntityName}Service.delete${entity.name}(${lowerEntityName}Id);
		return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
   }

  
	
	
	
	
	
	
	
	@GetMapping(
			value = "/{${lowerEntityName}Id}",
			produces = MediaType.APPLICATION_JSON_VALUE)

	@ResponseStatus(code = HttpStatus.OK)

	@Operation(
			summary = "Get a ${entity.name}", 
			description = "Get a ${entity.name}")

	@ApiResponses(
			value = { @ApiResponse(
					responseCode = "200", 
					description = "successful operation") })

	@Tags({ 
		@Tag(name="${entity.name}")})
    public ResponseEntity<${entity.name}Model> get${entity.name}(@PathVariable final ${idType} ${lowerEntityName}Id) {

		${entity.name} entity = this.${lowerEntityName}Service.get${entity.name}(${lowerEntityName}Id);
		if (entity == null) {
			return null;
		} else {
			
			${entity.name}Model model = ${entity.name}Model.fromEntity(entity)
					.add(getSelfLink(entity.getId()))
					.add(getCreateLink())
					.add(getUpdateLink(entity.getId()))
					.add(getDeleteLink(entity.getId()))
					.add(getGetAllLink());

			return ResponseEntity
		    	      .status(HttpStatus.OK)
		    	      .body(model);
		}
    }	
	
	
	
	
	
	
	
	@GetMapping(
			produces = MediaType.APPLICATION_JSON_VALUE)

	@ResponseStatus(code = HttpStatus.OK)

    @Operation(
    		summary = "Get all ${entity.name}",
    		description = "Get all ${entity.name}")

    @ApiResponses(
    		value = {@ApiResponse(
    				responseCode = "200", 
    				description = "successful operation")})

	@Tags({ 
		@Tag(name="${entity.name}")})
    public ResponseEntity<List<${entity.name}Model>> get${entity.name}s() {
		List<${entity.name}Model> models = this.${lowerEntityName}Service.get${entity.name}s().stream()
        		.map(${entity.name}Model::fromEntity)
        		.map(model -> model.add(getSelfLink(model.getId())))
        		.map(model -> model.add(getCreateLink()))
        		.map(model -> model.add(getUpdateLink(model.getId())))
        		.map(model -> model.add(getDeleteLink(model.getId())))
        		.map(model -> model.add(getGetAllLink()))
        		.toList();

		return ResponseEntity
	    	      .status(HttpStatus.OK)
	    	      .body(models);
    }
}