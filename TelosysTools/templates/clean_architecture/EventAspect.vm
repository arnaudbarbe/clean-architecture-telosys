package ${target.javaPackageFromFolder(${SRC})};

import java.util.UUID;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ${ROOT_PKG}.core.model.${entity.name};
import ${ROOT_PKG}.infrastructure.configuration.eventdriven.Event;
import ${ROOT_PKG}.infrastructure.configuration.rabbitmq.v1.publisher.${entity.name}EventPublisher;
import ${ROOT_PKG}.infrastructure.delivery.dto.v1.${entity.name}Dto;

@Aspect
@Component
public class ${entity.name}Aspect {
	
	private final ${entity.name}EventPublisher domainObjectEventPublisher;
	
	@Autowired
	public ${entity.name}Aspect(final ${entity.name}EventPublisher domainObjectEventPublisher) {
		this.domainObjectEventPublisher = domainObjectEventPublisher;
	}
	
	@After("execution(* ${ROOT_PKG}.core.service.Domain${entity.name}Service.create${entity.name}(..)) && args(domainObject)")
    public void eventAfterCreate${entity.name}(final JoinPoint joinPoint, final ${entity.name} domainObject) {

    	Event<${entity.name}Dto> event = 
    			new Event<>(
    					Event.StandardStatus.CREATED.name(), 
    					${entity.name}Dto.fromEntity(domainObject));
    	
    	this.domainObjectEventPublisher.create${entity.name}Event(event);
    }

	@After("execution(* ${ROOT_PKG}.core.service.Domain${entity.name}Service.update${entity.name}(..)) && args(id, domainObject)")
    public void eventAfterUpdate${entity.name}(final JoinPoint joinPoint, final UUID id, final ${entity.name} domainObject) {

    	Event<${entity.name}Dto> event = 
    			new Event<>(
    					Event.StandardStatus.UPDATED.name(), 
    					${entity.name}Dto.fromEntity(domainObject));
    	
    	this.domainObjectEventPublisher.update${entity.name}Event(event);
    }

	@After("execution(* ${ROOT_PKG}.core.service.Domain${entity.name}Service.delete${entity.name}(..)) && args(id)")
    public void eventAfterdelete${entity.name}(final JoinPoint joinPoint, final UUID id) {

    	Event<UUID> event = 
    			new Event<>(
    					Event.StandardStatus.DELETED.name(), id);
    	
    	this.domainObjectEventPublisher.delete${entity.name}Event(event);
    }
}
